# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER - Login user for docker hub
# DOCKER_PASS - Login password for docker hub user
# NPM_TOKEN - A valid NPM token for releases
version: 2.1

orbs:
  codecov: codecov/codecov@3.2.2

references:
  defaults: &defaults
    working_directory: ~/addons-frontend
    docker:
      # This is the NodeJS version we run in production.
      - image: circleci/node:14

  defaults-next: &defaults-next
    working_directory: ~/addons-frontend
    docker:
      # This is the next NodeJS version we will support.
      - image: cimg/node:16.14

  defaults-release: &defaults-release
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/addons-frontend

  restore_build_cache: &restore_build_cache
    restore_cache:
      name: restore yarn package cache
      keys:
        - yarn-packages-{{ checksum "yarn.lock" }}

  run_yarn_install: &run_yarn_install
    run:
      name: install dependencies
      # See: https://github.com/mozilla/addons-frontend/issues/3034
      command: yarn install --pure-lockfile

  save_build_cache: &save_build_cache
    save_cache:
      name: save yarn package cache
      key: yarn-packages-{{ checksum "yarn.lock" }}
      paths:
        - ~/.cache/yarn

  restore_next_build_cache: &restore_next_build_cache
    restore_cache:
      name: restore yarn package cache
      keys:
        - next-yarn-packages-{{ checksum "yarn.lock" }}

  save_next_build_cache: &save_next_build_cache
    save_cache:
      name: save yarn package cache
      key: next-yarn-packages-{{ checksum "yarn.lock" }}
      paths:
        - ~/.cache/yarn

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - *restore_build_cache
      - *run_yarn_install
      - *save_build_cache
      - run: yarn build-ci

  build-blog-utils:
    <<: *defaults
    steps:
      - checkout
      - *restore_build_cache
      - *run_yarn_install
      - *save_build_cache
      - run: yarn build:blog-utils-prod
      # Set up a workspace to share data between this job and the
      # `release-blog-utils` one when we want to publish a new npm version.
      - persist_to_workspace:
          root: ~/addons-frontend
          paths: dist


  test:
    <<: *defaults
    steps:
      - checkout
      - *restore_build_cache
      - *run_yarn_install
      - *save_build_cache
      - run: yarn test-ci
      - codecov/upload

  check:
    <<: *defaults
    docker:
      - image: cimg/python:3.10-node
    steps:
      - checkout
      - *restore_build_cache
      - *run_yarn_install
      - *save_build_cache
      - run: yarn lint
      - run: yarn prettier-ci
      - run: pip install fonttools brotli && yarn check-fonts
      - run: yarn build:qrcodes

  build-next:
    <<: *defaults-next
    steps:
      - checkout
      - *restore_next_build_cache
      - *run_yarn_install
      - *save_next_build_cache
      - run: yarn build

  test-next:
    <<: *defaults-next
    steps:
      - checkout
      - *restore_next_build_cache
      - *run_yarn_install
      - *save_next_build_cache
      - run: yarn test-ci

  dennis-lint:
    <<: *defaults-release
    steps:
      - checkout
      - run: pyenv global 3.7.0
      - run: pip install tox
      - run: TOXENV=dennis-lint tox


  release-blog-utils:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/addons-frontend
      - run:
          name: authenticate with registry
          # We don't want to expand the token in this file, npm will do it.
          command: echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > ~/addons-frontend/dist/.npmrc
      - run:
          name: publish package
          command: cd dist && npm publish

  release-tag: # build for the master branch and tags
    <<: *defaults-release
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: sudo apt-get update; sudo apt-get install pigz
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run:
          name: "Install Tox"
          command: pip install tox
      - run: docker info
        # Build the container, using Circle's Docker cache. Only use 1 image per
        # day to keep the cache size down.
      - run:
          name: Build the container ( Next 3 steps )
          command: IMG="image-$(date +%j).gz"; if [[ -e ~/addons-frontend/docker/$IMG ]]; then echo "Loading $IMG"; pigz -d -c ~/addons-frontend/docker/$IMG | docker load; fi
      - run: >
          printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n'
          "$CIRCLE_SHA1"
          "$CIRCLE_TAG"
          "$CIRCLE_PROJECT_USERNAME"
          "$CIRCLE_PROJECT_REPONAME"
          "$CIRCLE_BUILD_URL"
          > version.json
      - run:
          name: Build the docker image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker build --pull -t addons-frontend .
      - run: docker images
      - run: docker run --rm addons-frontend node --version
      - run:
          name: Write the sha256 sum to an artifact for verification
          command: |
            docker images --no-trunc | awk '/^app/ {print $3}' | sudo tee $CIRCLE_ARTIFACTS/docker-image-shasum256.txt
      - run:
          name: Save new image
          command: |
            IMG="image-$(date +%j).gz"; docker save addons-frontend | pigz --fast -c > ~/addons-frontend/docker/$IMG; ls -l ~/addons-frontend/docker
            ls -l ~/addons-frontend/docker
      - run:
          name: Push to repo
          command: |
            [ ! -z $DOCKERHUB_REPO ]
            echo $DOCKERHUB_REPO:$CIRCLE_TAG
            docker tag addons-frontend $DOCKERHUB_REPO:$CIRCLE_TAG
            docker images
            docker push $DOCKERHUB_REPO:$CIRCLE_TAG
      - run:
          name: Set hosts
          command: |
            echo 127.0.0.1 olympia.test | sudo tee -a /etc/hosts
            cat /etc/hosts
      - run:
          name: Test Image
          command: |
            sudo sysctl -w vm.max_map_count=262144
            ./tests/smoke/setup_docker.sh
            tox -e smoke-tests

  release-master: # build for the master branch and tags
    <<: *defaults-release
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: sudo apt-get update; sudo apt-get install pigz
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run:
          name: "Install Tox"
          command: pip install tox
      - run: docker info
        # Build the container, using Circle's Docker cache. Only use 1 image per
        # day to keep the cache size down.
      - run:
          name: Build the container ( Next 2 steps )
          command: IMG="image-$(date +%j).gz"; if [[ -e ~/addons-frontend/docker/$IMG ]]; then echo "Loading $IMG"; pigz -d -c ~/addons-frontend/docker/$IMG | docker load; fi
      - run: >
          printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n'
          "$CIRCLE_SHA1"
          "$CIRCLE_TAG"
          "$CIRCLE_PROJECT_USERNAME"
          "$CIRCLE_PROJECT_REPONAME"
          "$CIRCLE_BUILD_URL"
          > version.json
      - run:
          name: Build the docker image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker build --pull -t addons-frontend .
      - run: docker images
      - run: docker run --rm addons-frontend node --version
      - run:
          name: Write the sha256 sum to an artifact for verification
          command: |
            docker images --no-trunc | awk '/^app/ {print $3}' | sudo tee $CIRCLE_ARTIFACTS/docker-image-shasum256.txt
      - run:
          name: Save new image
          command: |
            IMG="image-$(date +%j).gz"; docker save addons-frontend | pigz --fast -c > ~/addons-frontend/docker/$IMG; ls -l ~/addons-frontend/docker
            ls -l ~/addons-frontend/docker
      - run:
          name: Push to repo
          command: |
            [ ! -z $DOCKERHUB_REPO ]
            docker tag addons-frontend $DOCKERHUB_REPO:latest
            docker push $DOCKERHUB_REPO:latest
      - run:
          name: Set hosts
          command: |
            echo 127.0.0.1 olympia.test | sudo tee -a /etc/hosts
            cat /etc/hosts
      - run:
          name: Test Image
          command: |
            sudo sysctl -w vm.max_map_count=262144
            ./tests/smoke/setup_docker.sh
            tox -e smoke-tests

workflows:
  version: 2
  default-workflow:
    jobs:
      - build
      - test
      - build-next
      - test-next
      - check
      - dennis-lint
      - build-blog-utils:
          filters: # required since `release-blog-utils` has tag filters AND requires this job
            tags:
              only: /^blog-utils-.*/
      - release-tag:
          filters:
            tags:
              only: /^\d+.*/
            branches:
              ignore: /.*/
      - release-blog-utils:
          filters:
            tags:
              only: /^blog-utils-.*/
            branches:
              ignore: /.*/
          requires:
            - build-blog-utils
      - release-master:
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/

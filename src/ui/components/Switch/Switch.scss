@import "~disco/css/inc/vars";
@import "~core/css/inc/mixins";
$size: 26px;
$borderSize: 1px;
$transition: 0.3s;
$switchHandleActive: #fff;
$switchHandleInactive: transparentize($switchHandleActive, 0.75);
$switchHandleGap: 1px;
$switchHandleDisabledOpacity: 0.25;
$switchToBackgroundRatio: 2.7;
$switchStrokeOff: #858585;
$switchStrokeOn: #00a920;
$switchStrokeWidth: 1px;
$switchHandleActivePosition: round(($size * $switchToBackgroundRatio) - ($size + ($switchHandleGap * 2 + $switchStrokeWidth)));
$switchBackgroundOn: #57bd35;
$switchBackgroundOff: #b1b1b1;
$uninstallStripeColor1: $switchBackgroundOff;
$uninstallStripeColor2: #d4d4d4;
$installStripeColor1: #00a920;
$installStripeColor2: #00c42e;

@keyframes stripes {
  from {
    background-position: 0 0;
  }

  to {
    background-position: $size $size / 2;
  }
}

@mixin stripes($color1, $color2, $stripeBackgroundColor) {
  animation: stripes 0.5s linear infinite;
  background-color: $stripeBackgroundColor;
  background-image:
    repeating-linear-gradient(
      45deg,
      $color1,
      $color1 25%,
      $color2 25%,
      $color2 50%,
      $color1 50%
    );
  background-size: $size / 2 $size / 2;
}

.Switch {
  display: inline-block;
  position: relative;

  input:focus + label {
    @include focus();
  }

  input + label {
    background: $switchBackgroundOff;
    border: $switchStrokeWidth solid $switchStrokeOff;
    border-radius: $size;
    cursor: pointer;
    display: block;
    height: $size + ($switchHandleGap * 2) + ($switchStrokeWidth * 2);
    overflow: hidden;
    position: relative;
    transition: border-color 0.1s;
    width: round($size * $switchToBackgroundRatio);

    &::before,
    &::after {
      content: "";
      display: block;
      position: absolute;
    }

    // Switch background.
    &::before {
      border-radius: $size;
      bottom: 0;
      left: 0;
      right: 0;
      top: 0;
      transition: background-color $transition;
    }

    // Handle.
    &::after {
      background: $switchHandleActive;
      border-radius: 50%;
      bottom: $switchHandleGap;
      box-shadow: 0 1px 1px rgba(0, 0, 0, 0.25);
      height: $size;
      top: $switchHandleGap;
      transform: translateX($switchHandleGap);
      transition: transform $transition, box-shadow $transition;
      width: $size;
      z-index: 3;

      [dir=rtl] & {
        transform: translateX(-$switchHandleGap);
      }
    }

    &:hover::after {
      box-shadow: 0 1px 1px rgba(0, 0, 0, 0.25), 0 0 0 $size/2 transparentize($switchHandleActive, 0.8);
    }
  }

  // Disabled State
  input:disabled + label,
  input:checked:disabled + label {
    cursor: not-allowed;

    &::after {
      background: $switchHandleInactive;
    }

    &:hover::after {
      box-shadow: none;
    }
  }

  input:checked + label {
    border-color: $switchStrokeOn;

    &::before {
      background: $switchBackgroundOn;
    }

    &::after {
      transform: translateX($switchHandleActivePosition);

      [dir=rtl] & {
        transform: translateX(-$switchHandleActivePosition);
      }
    }
  }

  &.Switch--success {
    input + label::before {
      background: $switchBackgroundOn url("./tick.svg") no-repeat 35% 50%;

      [dir=rtl] & {
        background-position: 65% 50%;
      }
    }
  }
}

.Switch--indefinite-reverse {
  input + label::before {
    @include stripes($uninstallStripeColor1, $uninstallStripeColor2, $switchBackgroundOff);
    // Reverse the stripe direction without
    // impacting the animation speed.
    transform: scaleX(-1);
  }

  input + label {
    &::after {
      transform: translateX($switchHandleGap);

      [dir=rtl] & {
        transform: translateX(-$switchHandleGap);
      }
    }

    &:hover::after {
      box-shadow: none;
    }
  }
}

.Switch--progress {
  overflow: hidden;
  position: relative;

  input + label {
    border: 1px solid $switchStrokeOff;
    overflow: hidden;

    &::after {
      background: $switchHandleActive;
      transform: translateX($switchHandleActivePosition);

      [dir=rtl] & {
        transform: translateX(-$switchHandleActivePosition);
      }
    }
  }
}

.Switch--indefinite {
  input:checked + label {
    border-color: $switchStrokeOn;

    &::before {
      @include stripes($installStripeColor1, $installStripeColor2, $switchBackgroundOn);
    }

    &::after {
      transform: translateX($switchHandleActivePosition);

      [dir=rtl] & {
        transform: translateX(-$switchHandleActivePosition);
      }
    }

    &:hover::after {
      box-shadow: none;
    }
  }
}

.Switch-progress-bar {
  background: transparentize(#3ef827, 0.5);
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  transform: translateX(-100%);
  transition: transform $transition;
  width: 100%;

  [dir=rtl] & {
    transform: translateX(100%);
  }
}

@for $i from 1 through 100 {
  [data-progress="#{$i}"] .Switch-progress-bar {
    transform: translateX(#{percentage($i - 100) / 100});

    [dir=rtl] & {
      transform: translateX(#{percentage(100 - $i) / 100});
    }
  }
}

@import './vars';

/* Font mixins. Changes here affect *alL* apps */

@mixin font-light() {
  font-family: 'Fira Sans', sans-serif;
  font-weight: 300;
  font-style: normal;
}

@mixin font-light-italic() {
  font-family: 'Fira Sans', sans-serif;
  font-weight: 300;
  font-style: normal;
}

@mixin font-regular() {
  font-family: 'Fira Sans', sans-serif;
  font-weight: 400;
  font-style: normal;
}

@mixin font-regular-italic() {
  font-family: 'Fira Sans', sans-serif;
  font-weight: 400;
  font-style: italic;
}

@mixin font-medium() {
  font-family: 'Fira Sans', sans-serif;
  font-weight: 500;
  font-style: normal;
}

@mixin font-medium-italic() {
  font-family: 'Fira Sans', sans-serif;
  font-weight: 500;
  font-style: italic;
}

@mixin font-bold() {
  font-family: 'Fira Sans', sans-serif;
  font-weight: 600;
  font-style: normal;
}

@mixin font-bold-italic() {
  font-family: 'Fira Sans', sans-serif;
  font-weight: 600;
  font-style: italic;
}

/* Shared mixins. Bear in mind changes here impact *all* apps. */

@mixin focus() {
  border-color: $focus-outline-color;
  box-shadow: 0 0 5px 0 $focus-outline-color;
  outline: none;
}

/* stylelint-disable at-rule-empty-line-before, media-feature-no-missing-punctuation  */
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media #{map-get($breakpoints, $breakpoint)} {
      @content;
    }
  } @else {
    @warn 'Unfortunately, no value could be retrieved from `#{$breakpoint}`. '
      + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

/* Arrows */
$default-arrow-margin: 3px;
@mixin arrow($margin: $default-arrow-margin) {
  background: url('~amo/img/icons/arrow.svg') 50% 50% no-repeat;
  border-radius: $border-radius-m;
  content: '';
  display: inline-block;
  height: 16px;
  margin-right: -$margin * 2;
  position: relative;
  right: -$margin;
  top: 4px;
  width: 22px;

  [dir=rtl] & {
    left: -$margin;
    margin-left: -$margin * 2;
    margin-right: 0;
    right: auto;
    transform: rotate(180deg);
  }
}

@mixin arrow-down($margin: $default-arrow-margin) {
  @include arrow($margin);

  transform: rotate(90deg);
}

// This alias to arrow (which is the same as arrow-next) makes it easier to
// differentiate two arrows when both arrow-next and arrow-previous are used
// near each other.
@mixin arrow-next($margin: $default-arrow-margin) {
  @include arrow($margin);
}

@mixin arrow-previous($margin: $default-arrow-margin) {
  @include arrow($margin);

  left: -$margin;
  margin-left: -$margin * 2;
  margin-right: 0;
  right: auto;
  transform: rotate(180deg);

  [dir=rtl] & {
    left: auto;
    margin-left: 0;
    margin-right: -$margin * 2;
    right: -$margin;
    transform: none;
  }
}

@mixin arrow-up($margin: $default-arrow-margin) {
  @include arrow($margin);

  transform: rotate(270deg);
}

/* Button */
@mixin button($background: $button-background-color,
$color: $text-color-message) {
  background: $background;
  border-radius: $border-radius-default;
  border: 0;
  color: $color;
  cursor: pointer;
  display: inline-block;
  font-size: $font-size-m;
  line-height: 1.5em;
  margin: 0;
  padding: 0.5em 1em;
  text-align: center;
  text-decoration: none;
  transition-duration: $transition-short;
  transition-property: background-color;

  &:active,
  &:hover,
  &:focus {
    @if lightness($background) < 5% {
      background: lighten($background, 9%);
    } @else {
      background: darken($background, 3%);
    }

    @if lightness($background) > 80% {
      color: black;
    } @else {
      color: white;
    }
  }

  &:focus {
    @include focus();
  }

  &:disabled,
  &.disabled {
    @if lightness($background) > 80 {
      background: adjust-hue(darken(desaturate($background, 85%), 13%), 6);
    } @else {
      background: adjust-hue(lighten(desaturate($background, 85%), 13%), 6);
    }

    cursor: not-allowed;
  }

  &.warning {
    background: $warning;
  }

  &.button-start {
    border-bottom-right-radius: 0;
    border-top-right-radius: 0;
  }

  &.button-middle {
    border-radius: 0;
  }

  &.button-end {
    border-bottom-left-radius: 0;
    border-top-left-radius: 0;
  }

  &.button-inverse {
    background: transparent;
    border: 1px solid $background;
    color: $background;
  }

  &::-moz-focus-inner {
    border: 0;
    padding: 0;
  }
}

@mixin text-align-start() {
  text-align: left;

  [dir=rtl] & {
    text-align: right;
  }
}

@mixin start($pos) {
  left: $pos;
  right: auto;

  [dir=rtl] & {
    left: auto;
    right: $pos;
  }
}

@mixin end($pos) {
  left: auto;
  right: $pos;

  [dir=rtl] & {
    left: $pos;
    right: auto;
  }
}

@mixin margin($top, $end, $bottom, $start) {
  margin: $top $end $bottom $start;

  [dir=rtl] & {
    margin: $top $start $bottom $end;
  }
}

@mixin margin-start($val) {
  [dir=ltr] & {
    margin-left: $val;
  }

  [dir=rtl] & {
    margin-right: $val;
  }
}

@mixin margin-end($val) {
  [dir=ltr] & {
    margin-right: $val;
  }

  [dir=rtl] & {
    margin-left: $val;
  }
}

@mixin addonSection() {
  background: $base-color;
  padding: 10px;
  overflow: hidden;
}

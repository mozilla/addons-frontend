#!/usr/bin/env node
/* eslint-disable no-console */
const fs = require('fs');

const shell = require('shelljs');
const { oneLine } = require('common-tags');
const CharacterSet = require('characterset');
const prettier = require('prettier');

function getUnicodeRangeFromFile(file) {
  return shell.exec(`./bin/find_characters_in_font.py ${file}`, {silent: true}).stdout.replace('\n', '');
}

const fonts = {
  'src/fonts/woff2/Inter-roman.var.woff2': {
    inputFile: 'src/fonts/woff2/Inter-roman-reduced-weights.var.woff2',
    cssFile: 'inter.scss',
    cssFontDisplay: 'swap',
    htmlFile: 'Inter-roman.var.html',
  },
  'src/fonts/woff2/Inter-roman-subset-en_de_fr_ru_es_pt_pl_it.var.woff2': {
    inputFile: 'src/fonts/woff2/Inter-roman-reduced-weights.var.woff2',
    cssFile: 'inter-subset.scss',
    cssFontDisplay: 'block',  /* we preload that font and want browser to always use it */
    htmlFile: 'Inter-roman-subset-en_de_fr_ru_es_pt_pl_it.var.html',
  },
}
const args = process.argv.slice(2);
const outputFile = args[0];
const outputCharacterSet = CharacterSet.parseUnicodeRange(args[1] || getUnicodeRangeFromFile(outputFile));

// Make sure this is ran from the root of the repos.
try {
  fs.accessSync('./bin/regenerate_font.js', fs.constants.R_OK);
} catch (err) {
  console.error('Please run this script from the root of the repository.');
  return;
}

// Make sure the font specified on command line is correct.
try {
  if (!fonts[outputFile].inputFile) {
    throw new Error('Unsupported font!');
  }
  fs.accessSync(outputFile, fs.constants.R_OK);
} catch (err) {
  console.error(oneLine`Specified file does not exist or is not one of the
    supported fonts. Supported fonts are: ${Object.keys(fonts).join(', ')}`);
  return;
}

// Make sure unicode range makes sense.
if (!outputCharacterSet.size) {
    console.error('Invalid unicode range specified !');
  return;
}

const { inputFile, cssFile, cssFontDisplay, htmlFile } = fonts[outputFile];

console.info(`Generating font ${outputFile} from ${inputFile} ...`);

shell.exec(oneLine`pyftsubset ${inputFile}
  --output-file=${outputFile}
  --flavor=woff2
  --layout-features=kern
  --no-hinting
  --unicodes="${outputCharacterSet.toHexRangeString()}"`);

console.info('Generating css...');
const unicodeRangeFromFile = getUnicodeRangeFromFile(outputFile);
const characterSetFromFile = CharacterSet.parseUnicodeRange(unicodeRangeFromFile);

const cssContents = `/* This file is automatically generated! See src/fonts/README.md for details */
@font-face {
  font-display: ${cssFontDisplay};
  font-family: Inter;
  font-style: normal;
  font-weight: 300 600; /* We only need those weights */
  src: url('${outputFile.replace('src/fonts/', '')}') format('woff2');
  unicode-range: ${characterSetFromFile.toHexRangeString()};
}
`
const runPrettierWithConfig = (text) => {
  const filePath = prettier.resolveConfigFile.sync();
  const options = prettier.resolveConfig.sync(filePath);
  return prettier.format(text, { ...options, parser: 'scss' });
}
fs.writeFileSync(`src/fonts/${cssFile}`, runPrettierWithConfig(cssContents));


console.info('Generating html...');
const htmlContents = `<meta charset="utf-8" /><style>
    @import '${cssFile}';

    body { font-family: Inter; font-size: 42px; margin: 1em; }
    h1 { font-size: 42px; }
    span { display: inline-block; width: 1em; border: 1px solid gray; padding: 0.1em; min-height: 1em; margin: 0.1em; }
</style>
<h1>${outputFile.replace('src/fonts/woff2/', '')}</h1>
<div>${characterSetFromFile.toArray().map((chr) => `<span title="U+${chr.toString(16)}">${String.fromCodePoint(chr)}</span>`).join('\n')}</div>
`;
fs.writeFileSync(`src/fonts/${htmlFile}`, htmlContents);

#!/usr/bin/env node --use_strict
/* eslint-disable no-console */

require('babel-register');

const config = require('config');
const fs = require('fs');
const path = require('path');
const shell = require('shelljs');

const supportedLangs = config.get('langs');
const localeDir = path.join(__dirname, '../locale');
const templateDir = path.join(localeDir, '/templates/LC_MESSAGES/contents/');
const langToLocale = require('../src/core/i18n/utils').langToLocale;

let locale;

// Get guide md files.
const files = fs.readdirSync(__dirname + '/../guides/');
const mdFiles = files.filter(file => path.extname(file) === '.md');

for (file of mdFiles) {
  // TODO: uncomment the following for loop when ready for all locales.
  // For now we'll use locale af to sample this.
  // for (supportedLang of supportedLangs) {

    const fileName = path.basename(file, '.md');
    // locale = langToLocale(supportedLang);
    locale = 'fr';
    shell.exec(`mkdir -p ${localeDir}/${locale}/LC_MESSAGES/contents/`);
    const outputFile = path.join(localeDir, locale, 'LC_MESSAGES/contents/', `${fileName}.po`);

    try {
      fs.statSync(outputFile);
      // eslint-disable-next-line no-console
      console.log(`${outputFile} already exists skipping`);
    } catch (e) {
      if (e.code === 'ENOENT') {
        shell.exec(`msginit --no-translator --input=${templateDir}${fileName}.pot
                    --output-file=${outputFile} -l ${locale}`.replace('\n', ' '));
      } else {
        throw e;
      }
    }
  // }
}

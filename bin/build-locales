#!/usr/bin/env node
/* eslint-disable no-var, no-console */
// We can't use strict mode because po2json causes
// referenceErrors.

require('babel-register');

const fs = require('fs');
const path = require('path');
const config = require('config');
const po2json = require('po2json');
const glob = require('glob');
const shelljs = require('shelljs');
const chalk = require('chalk');
const toSource = require('tosource');
const oneLine = require('common-tags').oneLine;

const appName = config.get('appName');

if (!appName) {
  console.log(
    chalk.red('Please specify the appName with NODE_APP_INSTANCE'));
  process.exit(1);
}

const localeDir = path.join(__dirname, '../locale');
const poFiles = glob.sync(`${localeDir}/**/${appName}.po`);
const dest = path.join(__dirname, '../src/locale/');

poFiles.forEach((pofile) => {
  const dir = path.dirname(pofile);
  const subdir = path.dirname(dir);
  const locale = path.basename(subdir);
  const stem = path.basename(pofile, '.po');
  const localeOutputFilePath = path.join(dest, locale, `${stem}.js`);
  shelljs.mkdir('-p', path.join(dest, locale));

  const json = po2json.parseFileSync(pofile, {
    stringify: true,
    pretty: true,
    format: 'jed1.x',
    fuzzy: config.get('po2jsonFuzzyOutput'),
  });
  const localeObject = JSON.parse(json);

  // Add the moment locale JS into our locale file, if one is available and
  // we're building for AMO (which is the only app that uses moment right
  // now).
  if (appName === 'amo') {
    var defineLocale = null;
    try {
      const momentLocale = locale.replace('_', '-').toLowerCase();
      // We're using `new Function()` here to create a function out of the
      // raw code in this file; this function won't be executed but will be
      // written out by `toSource()` so that it can be used later (at runtime,
      // by moment).
      defineLocale = new Function(
        fs.readFileSync(
          `./node_modules/moment/locale/${momentLocale}.js`, 'utf8'
        )
      );
    } catch (e) {
      // We ignore missing locale errors for en_US as its moment's default
      // locale so we don't need to provide a translation.
      if (locale !== 'en_US') {
        console.info(oneLine`No moment i18n available for ${locale};
          consider adding one or creating a mapping.`);
      }
    }

    localeObject._momentDefineLocale = defineLocale;
  }

  fs.writeFileSync(
    localeOutputFilePath, `module.exports = ${toSource(localeObject)}`);
});
